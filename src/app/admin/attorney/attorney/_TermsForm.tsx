"use client";
import { Metadata } from "next";
import React, { useEffect, useState } from "react";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css";
import "../../../admin/admin.css";
import { z } from "zod";
import { useHookForm } from "@/hooks/useHookForm";
import { InputField } from "@/components/Form/InputField";
import LoadingButton from "@mui/lab/LoadingButton";
import Form from "@/components/Form/Form";
import axios from "axios";
import Snackbar from "@mui/material/Snackbar";
import useSnackbar from "@/hooks/useSnackbar";
import { Alert, CircularProgress } from "@mui/material";
import { useRouter, useSearchParams } from "next/navigation";
import { Content } from "@/types/Content";

type FormValues = {
  title: string;
};

const schema = z.object({
  title: ((msg) => z.string({ required_error: msg }).min(1, msg))(
    "Please enter the title"
  ),
});

export const metadata: Metadata = {
  title: "Attorney Engagement Letter",
  description: "Generated by create next app",
};

export default function Attorney() {
  const router = useRouter();
  const params = useSearchParams();
  const type = params?.get("type");

  const [value, setValue] = useState("");
  const { openSnackbar, snackProps, alertProps } = useSnackbar(); // Use the custom hook

  const { methods, setValues } = useHookForm<FormValues, typeof schema>(schema);
  const { formState, control, reset } = methods;
  const [loading, setLoading] = useState(false);
  const [isLoad, setLoad] = useState(false);

  const [data, setData] = useState<Content>();

  useEffect(() => {
    if (type) {
      const getAttorney = async () => {
        try {
          setLoading(true);
          const { data } = await axios.get(
            `/api/admin/attorney/getAttorney?type=${type}`
          );
          setData(data?.data);
          if (!data) {
            throw new Error("There was an error sending the otp.");
          }
        } catch (error: any) {
          const msg =
            error?.response?.data?.message ||
            error.message ||
            "Failed to resend otp.";
          openSnackbar({ message: msg, type: "error" });
        } finally {
          setLoading(false);
        }
      };

      getAttorney();
    }
  }, [type]);

  useEffect(() => {
    setValues({
      title: data?.title,
    });
    setValue(data?.text ?? "");
  }, [data]);

  return (
    <div className="privacy-forms indivi-form">
      {loading ? (
        <p className="text-center mt-5">
          <CircularProgress />
        </p>
      ) : (
        <Form<FormValues>
          onSubmit={async (values) => {
            try {
              setLoad(true);
              const response = await axios.post(`/api/admin/attorney/addAttorney`, {
                title: values.title,
                text: value,
                userType: type == "clientAttorney" ? "Client" : "Expert",
              });
              if (!response) {
                throw new Error("There was an error");
              }
              openSnackbar({ message: response.data.message, type: "success" });
              // router.push("/admin/terms-conditions");
            } catch (error: any) {
              const msg =
                error?.response?.data?.message ||
                error.message ||
                "Failed to reset the password.";
              openSnackbar({ message: msg, type: "error" });
            } finally {
              setLoad(false);
            }
          }}
          methods={methods}
        >
          <div className="row mt-3">
            <div className="col-12 col-md-12 mt-3">
              <InputField
                error={formState.errors["title"]}
                label="Title"
                name="title"
                className="bglight-ip"
                control={control}
              />
            </div>

            <div className="col-12 mt-3">
              <ReactQuill theme="snow" value={value} onChange={setValue} />
            </div>
            <div className="col-12 col-md-6 mt-4 text-right">
              <LoadingButton
                loading={isLoad}
                variant="contained"
                type="submit"
                className="load-btn"
                size="large"
              >
                <span>Submit</span>
              </LoadingButton>
            </div>
          </div>
        </Form>
      )}
      <Snackbar {...snackProps}>
        <Alert {...alertProps} />
      </Snackbar>
    </div>
  );
}
