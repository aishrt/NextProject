import { PaginateData } from "@/types/Paginate";
import { User as UserType } from "@/types/User";
import db from "@/utils/connectDB";
import { Metadata } from "next";
import React from "react";
import TaskTable from "@/app/container/TaskTable";
import "../../../admin/admin.css";
import TaskModel from "@/models/tasks.model";
import TaskDetails from "@/app/container/TaskView";
import UpdateView from "@/app/container/UpdateDetails";
import CaseUpdatesModel from "@/models/case.updates.model";
import Case from "@/models/case.model";
import mongoose from "mongoose";

export const metadata: Metadata = {
  title: "Case Updates",
  description: "Generated by create next app",
};

export default async function TaskView({
  searchParams,
}: {
  searchParams: { [key: string]: string | string[] | undefined };
}) {
  let page: string | string[] | undefined | number = searchParams?.page;
  // const router = useRouter();
  let id: any = searchParams?.id;

  page = !!page ? +page : 1;
  const fetchData = async (
    pageNumber: number
  ): Promise<PaginateData<UserType>> => {
    await db.connectDB();
    const totalUsers = await CaseUpdatesModel.countDocuments({});
    const totalPages = Math.ceil(totalUsers / 10);
    if (pageNumber > totalPages) {
      pageNumber = totalPages;
    }
    const start = pageNumber - 1;
    let ObjectID = new mongoose.Types.ObjectId(id);
    const userData = await CaseUpdatesModel.aggregate([
      {
        $match: {
          _id: ObjectID,
        },
      },
      {
        $lookup: {
          from: "cases",
          localField: "case_id",
          foreignField: "_id",
          as: "case_id",
        },
      },
      {
        $unwind: {
          path: "$case_id",
        },
      },
      {
        $limit: 1,
      },
    ]);
    return {
      data: userData[0] || [],
    };
  };

  const data: any = await fetchData(page);
  return (
    <div className="main-content expert-cases">
      <UpdateView data={data} id={id} role={"lawyer"} />
    </div>
  );
}
