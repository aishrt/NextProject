"use client";

import React, { useEffect, useState } from "react";
import ContentWrapper from "@/components/Layout/Admin/ContentWrapper";
import { Metadata } from "next";
import "../../client/client.css";
import { Stack } from "@mui/material";

import Box from "@mui/material/Box";
import Stepper from "@mui/material/Stepper";
import Step from "@mui/material/Step";
import StepLabel from "@mui/material/StepLabel";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import PrivacyPolicy from "./privacy-policy/Privacy";
import ThankuStep from "./thanku-page/page";
import RoleAndBasicInformation from "./_OvertimePayForms/RoleAndBasicInformation";
import ClaimDetails from "./_OvertimePayForms/ClaimDetails";
import HealthInformation from "./_OvertimePayForms/HealthInformation";
import DesiredOutcome from "./_OvertimePayForms/DesiredOutcome";
import ReviewSubmit from "./_OvertimePayForms/ReviewSubmit";
import { useSearchParams, useRouter } from "next/navigation";
import LinearProgress, {
  LinearProgressProps,
} from "@mui/material/LinearProgress";
import axios from "axios";

import CircularProgress from "@mui/material/CircularProgress";

const steps = ["Lorem ipsum", "Lorem ipsum", "Lorem ipsum"];

// export const metadata: Metadata = {
//   title: "Eviction Assessment Form",
//   title: "Eviction Assessment Form",
//   description: "Generated by create next app",
// };

export default function OvertimePayClaimEvaluation() {
  const router = useRouter();

  const [progress, setProgress] = useState(10);

  const [activeStep, setActiveStep] = React.useState(0);
  const [skipped, setSkipped] = React.useState(new Set<number>());

  const isStepOptional = (step: number) => {
    return step === 1;
  };

  const [loading, setLoading] = useState(false);

  const [overtimeData, setOvertimeData] = useState<any>({});

  const searchParmas = useSearchParams();
  const progressFromQuery = searchParmas?.get("progress");
  const caseFromQuery = searchParmas?.get("caseId");

  function LinearProgressWithLabel(
    props: LinearProgressProps & { value: number }
  ) {
    return (
      <Box sx={{ display: "flex", alignItems: "center" }}>
        <Box sx={{ width: "100%", mr: 1 }}>
          <LinearProgress variant="determinate" {...props} />
        </Box>
      </Box>
    );
  }

  useEffect(() => {
    if (progressFromQuery) {
      setProgress(+progressFromQuery);
    }
  }, [progressFromQuery]);

  useEffect(() => {
    const getCaseById = async () => {
      try {
        setLoading(true);
        if (caseFromQuery) {
          const { data } = await axios.get(
            `/api/client/category/overtime/getOvertime?caseId=${caseFromQuery}`
          );
          setOvertimeData(data.data);
          console.log(data.data);

          if (data.data) {
            // setIndividual(data.data.isIndividual);
          }
        }
        setLoading(false);
      } catch (error) {
        console.log("err", error);
        setLoading(false);
      }
    };
    getCaseById();
  }, [caseFromQuery]);

  const handleNext = async () => {
    try {
      if (progress === 10) {
        setLoading(true);
        let id;
        if (overtimeData) {
          if (overtimeData.caseId === caseFromQuery) {
            const { data } = await axios.post(
              "/api/client/category/overtime/createOvertime",
              {
                caseId: caseFromQuery,
                progress: 20,
              }
            );
            id = data.data.caseId;
          }
        } else {
          const { data } = await axios.post(
            "/api/client/category/overtime/createOvertime",
            {
              caseId: caseFromQuery,
              progress: 20,
            }
          );
          id = data.data.caseId;
        }
        const searchParmas = new URLSearchParams();
        searchParmas.set("caseId", id);
        searchParmas.set("progress", "20");
        router.push(
          `/client/overtime-pay-claim-form?${searchParmas.toString()}`
        );
        setLoading(false);
      }
    } catch (err) {
      console.log(err);
    }
  };

  const isStepSkipped = (step: number) => {
    return skipped.has(step);
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
  };

  const handleReset = () => {
    setActiveStep(0);
  };
  const normalise = (value: number, MAX: number) => {
    let MIN = 0;
    let finalVal = ((value - MIN) * 100) / (MAX - MIN);
    if (finalVal > 100) {
      finalVal = 100;
    }
    return finalVal;
  };

  return (
    <ContentWrapper>
      <Box sx={{ width: "100%" }}>
        <div className="top-title">
          <h2 className="f-22 bold mb-4 mt-5">
            Overtime Pay Claim Evaluation Form
          </h2>
        </div>

        <div className="create-cases mt-4">
          <Box sx={{ width: "100%" }}>
            <LinearProgressWithLabel value={normalise(progress, 70)} />
          </Box>

          {loading ? (
            <div className="text-center mt-5">
              <CircularProgress />
            </div>
          ) : (
            <div>
              {
                <React.Fragment>
                  <div className="cases-active">
                    {progress === 10 && (
                      <div className="">
                        <PrivacyPolicy handleNext={handleNext} />
                      </div>
                    )}

                    {progress === 20 && (
                      <div className="">
                        <RoleAndBasicInformation />
                      </div>
                    )}

                    {progress === 30 && (
                      <>
                        <div className=" eviction-form ">
                          <ClaimDetails />
                        </div>
                      </>
                    )}

                    {progress === 40 && (
                      <>
                        <div className=" eviction-form ">
                          <HealthInformation />
                        </div>
                      </>
                    )}
                    {progress === 50 && (
                      <>
                        <div className=" eviction-form ">
                          <DesiredOutcome />
                        </div>
                      </>
                    )}

                    {progress === 60 && (
                      <>
                        <div className=" eviction-form ">
                          <ReviewSubmit />
                        </div>
                      </>
                    )}
                    {progress === 70 && (
                      <>
                        <div className=" eviction-form ">
                          <ThankuStep />
                        </div>
                      </>
                    )}
                  </div>
                </React.Fragment>
              }
            </div>
          )}
        </div>
      </Box>
    </ContentWrapper>
  );
}
